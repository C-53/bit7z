version: 4.0.0-beta-build{build}
# skip_non_tags: true
clone_depth: 1

image:
  - Visual Studio 2015
  - Visual Studio 2017
  - Visual Studio 2019
  - Ubuntu

environment:
  bit7z_version: 4.0.0-beta
  APPVEYOR_YML_DISABLE_PS_LINUX: true

  matrix:
  - compiler: msvc
    platform: x86
    flags: -A Win32 -DBIT7Z_STATIC_RUNTIME=OFF
    
  - compiler: msvc
    platform: x64
    flags: -A x64 -DBIT7Z_STATIC_RUNTIME=OFF

  - compiler: msvc_mt
    platform: x86
    flags: -A Win32 -DBIT7Z_STATIC_RUNTIME=ON
    
  - compiler: msvc_mt
    platform: x64
    flags: -A x64 -DBIT7Z_STATIC_RUNTIME=ON

  - compiler: mingw
    platform: x86
    generator: MinGW Makefiles
    flags:
    PATH: C:\mingw-w64\i686-8.1.0-posix-dwarf-rt_v6-rev0\mingw32\bin;$(PATH)
    
  - compiler: mingw
    platform: x64
    generator: MinGW Makefiles
    flags:
    PATH: C:\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin;$(PATH)
    
  - compiler: gcc
    platform: x86
    generator: Unix Makefiles
    flags: -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32
    CC: /usr/bin/gcc-9
    CXX: /usr/bin/g++-9
    
  - compiler: gcc
    platform: x64
    generator: Unix Makefiles
    CC: /usr/bin/gcc-9
    CXX: /usr/bin/g++-9
    
  - compiler: clang
    platform: x86
    generator: Unix Makefiles
    flags: -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32
    CC: /usr/bin/clang
    CXX: /usr/bin/clang++
    CXX_FLAGS: -m32
    
  - compiler: clang
    platform: x64
    generator: Unix Makefiles
    CC: /usr/bin/clang
    CXX: /usr/bin/clang++

matrix:
  # fast_finish: true
  
  exclude:
    - image: Visual Studio 2015
      compiler: mingw
      platform: x86
    - image: Visual Studio 2015
      compiler: gcc
    - image: Visual Studio 2015
      compiler: clang
    - image: Visual Studio 2017
      compiler: mingw
      platform: x86
    - image: Visual Studio 2017
      compiler: mingw
      platform: x64
    - image: Visual Studio 2017
      compiler: gcc
    - image: Visual Studio 2017
      compiler: clang
    - image: Visual Studio 2019
      compiler: mingw
      platform: x64
    - image: Visual Studio 2019
      compiler: gcc
    - image: Visual Studio 2019
      compiler: clang
    - image: Ubuntu
      compiler: msvc
    - image: Ubuntu
      compiler: msvc_mt
    - image: Ubuntu
      compiler: mingw
      
for:
-
  matrix:
    only:
      - image: Ubuntu

  init: |-
    if [ "${compiler}" = "gcc" ];
    then
      tag=gcc$(${CXX} --version | grep ^g++ | sed 's/^.* //g')_${PLATFORM}
    else
      tag=clang$(${CXX} --version | head -n 1 | sed -e 's/.* version \([0-9.]*\).*/\1/')_${PLATFORM}
    fi

  before_build:
    - git submodule update --init --recursive
    - mkdir build
    - cd build

  build_script:
    - cmake .. -G "$generator" -DCMAKE_BUILD_TYPE=Release 
    - cmake --build . -j --config Release
    - cmake .. -G "$generator" -DCMAKE_BUILD_TYPE=Debug 
    - cmake --build . -j --config Debug

  after_build:
    - cd ..
    - mkdir -p pkg/bit7z/
    - mkdir -p pkg/bit7z/include/
    - cp -r lib pkg/bit7z
    - cp include/bit*.hpp pkg/bit7z/include/
    - cp README.md pkg/bit7z/
    - cp LICENSE pkg/bit7z/
    - echo $bit7z_version $tag > "pkg/bit7z/BUILD.txt"
    - cd pkg
    - 7z a -t7z bit7z-v$bit7z_version-$tag.7z *

-
  matrix:
    only:
      - image: Visual Studio 2015
      - image: Visual Studio 2017
      - image: Visual Studio 2019

  init:
    - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2019" (set generator=Visual Studio 16 2019)
    - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2017" (set generator=Visual Studio 15 2017)
    - if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2015" if NOT "%compiler%"=="mingw" (set generator=Visual Studio 14 2015)
    - if "%compiler%"=="mingw" (
        for /f %%i in ('g++ -dumpversion') do set "tag=mingw%%i_%platform%"
      ) else (
        set "tag=%APPVEYOR_BUILD_WORKER_IMAGE:Visual Studio =msvc%%compiler:msvc=%_%platform%"
      )

  before_build:
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - if "%compiler%"=="mingw" (rename "C:\Program Files\Git\usr\bin\sh.exe" "sh2.exe")

  build_script:
    - cmake .. -G "%generator%" %flags% -DCMAKE_BUILD_TYPE=Release
    - cmake --build . -j --config Release 
    - cmake .. -G "%generator%" %flags% -DCMAKE_BUILD_TYPE=Debug
    - cmake --build . -j --config Debug

  after_build:
    - cd ..
    - mkdir "pkg/bit7z/lib/"
    - mkdir "pkg/bit7z/include/"
    - ps: Copy-Item -Path lib\* -Destination pkg\bit7z\lib\ -Recurse
    - copy include\bit*.hpp pkg\bit7z\include\
    - copy README.md pkg\bit7z\
    - copy LICENSE pkg\bit7z\
    - echo %bit7z_version% %tag% > "pkg/bit7z/BUILD.txt"
    - cd pkg
    - 7z a "bit7z-v%bit7z_version%-%tag%.7z" *

artifacts:
  - path: pkg\*.7z
    name: binary

test: off

deploy:
  provider: GitHub
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: 'Binaries of Bit7z v%bit7z_version%'
  auth_token:
    secure: lBNuN4sQkluR2FDE6eGP811Dm2ooRkvDnxRL8YFPp0wMzaSEDoDtmOR04wZDL+LX
  artifact: /.*\.7z/
  draft: true
  prerelease: false
  on:
    # branch: master
    appveyor_repo_tag: true
